{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZL_6GK8qX35J"
   },
   "source": [
    "\n",
    "\n",
    "# Week 1: Multiple Output Models using the Keras Functional API\n",
    "\n",
    "Welcome to the first programming assignment of the course! Your task will be to use the Keras functional API to train a model to predict two outputs. For this lab, you will use the **[Wine Quality Dataset](https://archive.ics.uci.edu/ml/datasets/Wine+Quality)** from the **UCI machine learning repository**. It has separate datasets for red wine and white wine.\n",
    "\n",
    "Normally, the wines are classified into one of the quality ratings specified in the attributes. In this exercise, you will combine the two datasets to predict the wine quality and whether the wine is red or white solely from the attributes. \n",
    "\n",
    "You will model wine quality estimations as a regression problem and wine type detection as a binary classification problem.\n",
    "\n",
    "#### Please complete sections that are marked **(TODO)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "obdcD6urYBY9"
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "t8N3pcTQ5oQI"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "import utils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gQMERzWQYpgm"
   },
   "source": [
    "## Load Dataset\n",
    "\n",
    "\n",
    "You will now load the dataset from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php) which are already saved in your workspace.\n",
    "\n",
    "### Pre-process the white wine dataset (TODO)\n",
    "You will add a new column named `is_red` in your dataframe to indicate if the wine is white or red. \n",
    "- In the white wine dataset, you will fill the column `is_red` with  zeros (0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "2qYAjKXCd4RH",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "325ea195519b7035934c95bb529a062c",
     "grade": false,
     "grade_id": "cell-e5bfa0f152d9a21f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# URL of the white wine dataset\n",
    "URI = './winequality-white.csv'\n",
    "\n",
    "# load the dataset from the URL\n",
    "white_df = pd.read_csv(URI, sep=\";\")\n",
    "\n",
    "# fill the `is_red` column with zeros.\n",
    "white_df[\"is_red\"] = 0\n",
    "\n",
    "# keep only the first of duplicate items\n",
    "white_df = white_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "defe38d6ec58fd31cd67b89e46c4373f",
     "grade": true,
     "grade_id": "cell-30575e713b55fc51",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "# You can click `File -> Open` in the menu above and open the `utils.py` file \n",
    "# in case you want to inspect the unit tests being used for each graded function.\n",
    "\n",
    "utils.test_white_df(white_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OQHK0ohBQRCk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.8\n",
      "9.1\n"
     ]
    }
   ],
   "source": [
    "print(white_df.alcohol[0])\n",
    "print(white_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 8.8\n",
    "# 9.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the red wine dataset (TODO)\n",
    "- In the red wine dataset, you will fill in the column `is_red` with ones (1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8y3QxKwBed8v",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "12e0963d15be33b01b4e6ebc8945e51e",
     "grade": false,
     "grade_id": "cell-e47a40f306593274",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# URL of the red wine dataset\n",
    "URI = './winequality-red.csv'\n",
    "\n",
    "# load the dataset from the URL\n",
    "red_df = pd.read_csv(URI, sep=\";\")\n",
    "\n",
    "# fill the `is_red` column with ones.\n",
    "red_df[\"is_red\"] = 1\n",
    "\n",
    "# keep only the first of duplicate items\n",
    "red_df = red_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d8e0c91b0fd668b63ba74a8f2f958b59",
     "grade": true,
     "grade_id": "cell-2a75937adcc0c25b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_red_df(red_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zsB3LUzNQpo_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.2\n"
     ]
    }
   ],
   "source": [
    "print(red_df.alcohol[0])\n",
    "print(red_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2G8B-NYuM6-f"
   },
   "source": [
    "### Concatenate the datasets\n",
    "\n",
    "Next, concatenate the red and white wine dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YpQrOjJbfN3m"
   },
   "outputs": [],
   "source": [
    "df = pd.concat([red_df, white_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Se2dTmThQyjb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "9.5\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 9.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a real-world scenario, you should shuffle the data. For this assignment however, **you are not** going to do that because the grader needs to test with deterministic data. If you want the code to do it **after** you've gotten your grade for this notebook, we left the commented line below for reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wx6y3rPpQv4k"
   },
   "outputs": [],
   "source": [
    "#df = df.iloc[np.random.permutation(len(df))]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-EqIcbg5M_n1"
   },
   "source": [
    "This will chart the quality of the wines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IsvK0-Sgy17C"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAQk0lEQVR4nO3df6zddX3H8edL6rAUmShyw1q2sqQxAs1QbhgbCbmMTasYwWUmJUxgc6khuOjWZCn7xy1LE5aM/ZANsg4cNSJNh5KSIU7CdudMRCyKKT8kdFKxlFEdiJQZtPjeH/eLXtrT9vbcH+fc83k+kpNz7ud8P9/zfvec+7rf+7nfc5qqQpLUhtcMugBJ0sIx9CWpIYa+JDXE0Jekhhj6ktSQJYMu4EhOOumkWrlyZV9zX3zxRZYtWza3BQ3IqPQyKn2AvQyrUelltn088MAD36uqNx84PvShv3LlSrZv397X3MnJSSYmJua2oAEZlV5GpQ+wl2E1Kr3Mto8k3+417vKOJDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1ZOjfkSsNqx1PPc+VG+7qa+6uay+a42qkmfFIX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1JAjhn6SU5P8R5JHkzyc5CPd+BuT3JPk8e76xGlzrkmyM8ljSd45bfzsJDu6+z6eJPPTliSpl5kc6e8H1lfVW4FzgauTnA5sAO6tqlXAvd3XdPetBc4A1gA3JDmm29eNwDpgVXdZM4e9SJKO4IihX1VPV9XXutsvAI8Cy4GLgc3dZpuBS7rbFwNbquqlqnoC2Amck+QU4ISq+nJVFfDJaXMkSQvgqNb0k6wE3gZ8BRirqqdh6gcDcHK32XLgO9Om7e7Glne3DxyXJC2QJTPdMMnxwGeAj1bVDw6zHN/rjjrMeK/HWsfUMhBjY2NMTk7OtMxX2bdvX99zh82o9DIqfQCMLYX1q/f3NXfY/g1G6XkZlV7mq48ZhX6S1zIV+LdW1We74WeSnFJVT3dLN3u78d3AqdOmrwD2dOMreowfpKo2AZsAxsfHa2JiYmbdHGBycpJ+5w6bUellVPoAuP7WbVy3Y8bHTa+y67KJuS1mlkbpeRmVXuarj5mcvRPgZuDRqvrraXfdCVzR3b4C2DZtfG2SY5OcxtQfbO/vloBeSHJut8/Lp82RJC2AmRymnAd8ANiR5MFu7E+Ba4GtST4IPAm8H6CqHk6yFXiEqTN/rq6ql7t5VwG3AEuBu7uLJGmBHDH0q+pL9F6PB7jwEHM2Aht7jG8HzjyaAiVJc8d35EpSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JD+vtfnaUDrNxw14y2W796P1cesO2uay+aj5Ik9eCRviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhwx9JN8IsneJA9NG/uzJE8lebC7vHvafdck2ZnksSTvnDZ+dpId3X0fT5K5b0eSdDgzOdK/BVjTY/xvquqs7vI5gCSnA2uBM7o5NyQ5ptv+RmAdsKq79NqnJGkeHTH0q+qLwLMz3N/FwJaqeqmqngB2AuckOQU4oaq+XFUFfBK4pN+iJUn9WTKLuR9OcjmwHVhfVc8By4H7pm2zuxv7cXf7wPGekqxj6rcCxsbGmJyc7KvAffv29T132Ax7L+tX75/RdmNLD952mPs6nF69zNSw9Tzsr6+jMSq9zFcf/Yb+jcBfANVdXwf8PtBrnb4OM95TVW0CNgGMj4/XxMREX0VOTk7S79xhM+y9XLnhrhltt371fq7b8eqX3a7LJuahovl3/a3bDuplpoat52F/fR2NUellvvro6+ydqnqmql6uqp8A/wSc0921Gzh12qYrgD3d+Ioe45KkBdRX6Hdr9K94H/DKmT13AmuTHJvkNKb+YHt/VT0NvJDk3O6sncuBbbOoW5LUhyP+bprkNmACOCnJbuBjwESSs5haotkFfAigqh5OshV4BNgPXF1VL3e7uoqpM4GWAnd3F0nSAjpi6FfVpT2Gbz7M9huBjT3GtwNnHlV1kqQ55TtyJakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhwx9JN8IsneJA9NG3tjknuSPN5dnzjtvmuS7EzyWJJ3Ths/O8mO7r6PJ8nctyNJOpyZHOnfAqw5YGwDcG9VrQLu7b4myenAWuCMbs4NSY7p5twIrANWdZcD9ylJmmdHDP2q+iLw7AHDFwObu9ubgUumjW+pqpeq6glgJ3BOklOAE6rqy1VVwCenzZEkLZB+1/THquppgO765G58OfCdadvt7saWd7cPHJckLaAlc7y/Xuv0dZjx3jtJ1jG1FMTY2BiTk5N9FbNv376+5w6bYe9l/er9M9pubOnB2w5zX4fTq5eZGraeh/31dTRGpZf56qPf0H8mySlV9XS3dLO3G98NnDptuxXAnm58RY/xnqpqE7AJYHx8vCYmJvoqcnJykn7nDpth7+XKDXfNaLv1q/dz3Y5Xv+x2XTYxDxXNv+tv3XZQLzM1bD0P++vraIxKL/PVR7/LO3cCV3S3rwC2TRtfm+TYJKcx9Qfb+7sloBeSnNudtXP5tDmSpAVyxMOUJLcBE8BJSXYDHwOuBbYm+SDwJPB+gKp6OMlW4BFgP3B1Vb3c7eoqps4EWgrc3V0kSQvoiKFfVZce4q4LD7H9RmBjj/HtwJlHVZ0kaU75jlxJaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhoy15+9I2nIrezxkRnrV++f0Udp7Lr2ovkoSQvII31JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1ZFahn2RXkh1JHkyyvRt7Y5J7kjzeXZ84bftrkuxM8liSd862eEnS0ZmLI/0Lquqsqhrvvt4A3FtVq4B7u69JcjqwFjgDWAPckOSYOXh8SdIMzcfyzsXA5u72ZuCSaeNbquqlqnoC2AmcMw+PL0k6hFRV/5OTJ4DngAL+sao2Jfl+Vb1h2jbPVdWJSf4euK+qPtWN3wzcXVW399jvOmAdwNjY2Nlbtmzpq759+/Zx/PHH9zV32Ax7Lzueen5G240thWd++Oqx1ct/fh4qmn97n33+oF5mapA993quej0vvSyG52rYv1dmarZ9XHDBBQ9MW4H5qSWzqgrOq6o9SU4G7knyzcNsmx5jPX/iVNUmYBPA+Ph4TUxM9FXc5OQk/c4dNsPey5Ub7prRdutX7+e6Ha9+2e26bGIeKpp/19+67aBeZmqQPfd6rno9L70shudq2L9XZmq++pjV8k5V7emu9wJ3MLVc80ySUwC6673d5ruBU6dNXwHsmc3jS5KOTt+hn2RZkte/cht4B/AQcCdwRbfZFcC27vadwNokxyY5DVgF3N/v40uSjt5slnfGgDuSvLKfT1fV55N8Fdia5IPAk8D7Aarq4SRbgUeA/cDVVfXyrKqXJB2VvkO/qr4F/EqP8f8FLjzEnI3Axn4fU5I0O74jV5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDen7P0bX/Fm54a6Dxtav3s+VPcYPtOvai+ajJEkjwiN9SWqIoS9JDTH0Jakhhr4kNcTQl6SGePaOpKHX64y2Q+l1pptntf2MR/qS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktSQBX9HbpI1wN8BxwA3VdW18/VYO556fkafQd+L7+CTNIoW9Eg/yTHAPwDvAk4HLk1y+kLWIEktW+gj/XOAnVX1LYAkW4CLgUcWuA5JmndH85lBB7plzbI5rORnUlXzsuOeD5b8DrCmqv6g+/oDwK9W1YcP2G4dsK778i3AY30+5EnA9/qcO2xGpZdR6QPsZViNSi+z7eOXqurNBw4u9JF+eowd9FOnqjYBm2b9YMn2qhqf7X6Gwaj0Mip9gL0Mq1HpZb76WOizd3YDp077egWwZ4FrkKRmLXTofxVYleS0JD8HrAXuXOAaJKlZC7q8U1X7k3wY+DemTtn8RFU9PI8POesloiEyKr2MSh9gL8NqVHqZlz4W9A+5kqTB8h25ktQQQ1+SGjJyoZ/kdUnuT/KNJA8n+fNB1zRbSY5J8vUk/zroWmYjya4kO5I8mGT7oOuZjSRvSHJ7km8meTTJrw26pqOV5C3dc/HK5QdJPjrouvqV5I+67/mHktyW5HWDrqlfST7S9fHwXD8nI7emnyTAsqral+S1wJeAj1TVfQMurW9J/hgYB06oqvcMup5+JdkFjFfVon/jTJLNwH9V1U3dmWjHVdX3B11Xv7qPSHmKqTdLfnvQ9RytJMuZ+l4/vap+mGQr8LmqumWwlR29JGcCW5j6BIMfAZ8Hrqqqx+di/yN3pF9T9nVfvra7LNqfbElWABcBNw26Fk1JcgJwPnAzQFX9aDEHfudC4L8XY+BPswRYmmQJcByL9z1AbwXuq6r/q6r9wH8C75urnY9c6MNPl0MeBPYC91TVVwZd0yz8LfAnwE8GXcgcKOALSR7oPmpjsfpl4LvAP3fLbjclmZ8PSlk4a4HbBl1Ev6rqKeCvgCeBp4Hnq+oLg62qbw8B5yd5U5LjgHfz6je1zspIhn5VvVxVZzH1jt9zul+XFp0k7wH2VtUDg65ljpxXVW9n6lNWr05y/qAL6tMS4O3AjVX1NuBFYMNgS+pftzz1XuBfBl1Lv5KcyNSHN54G/AKwLMnvDraq/lTVo8BfAvcwtbTzDWD/XO1/JEP/Fd2v3JPAmgGX0q/zgPd2a+FbgN9I8qnBltS/qtrTXe8F7mBqzXIx2g3snvYb5O1M/RBYrN4FfK2qnhl0IbPwm8ATVfXdqvox8Fng1wdcU9+q6uaqentVnQ88C8zJej6MYOgneXOSN3S3lzL1YvjmYKvqT1VdU1UrqmolU79+/3tVLcqjlyTLkrz+ldvAO5j6NXbRqar/Ab6T5C3d0IUs7o8Hv5RFvLTTeRI4N8lx3ckcFwKPDrimviU5ubv+ReC3mcPnZ8H/56wFcAqwuTsb4TXA1qpa1Kc6jogx4I6p70eWAJ+uqs8PtqRZ+UPg1m5p5FvA7w24nr50a8a/BXxo0LXMRlV9JcntwNeYWgr5Oov74xg+k+RNwI+Bq6vqubna8cidsilJOrSRW96RJB2aoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5Ia8v9wPc08ifqwpQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Nut1rmYLzf-p"
   },
   "source": [
    "### Imbalanced data (TODO)\n",
    "You can see from the plot above that the wine quality dataset is imbalanced. \n",
    "- Since there are very few observations with quality equal to 3, 4, 8 and 9, you can drop these observations from your dataset. \n",
    "- You can do this by removing data belonging to all classes except those > 4 and < 8."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "doH9_-gnf3sz",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d9ba9fc3a3ca02ccc567be33652b80fe",
     "grade": false,
     "grade_id": "cell-6a3e9db696f6827b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# get data with wine quality greater than 4 and less than 8\n",
    "df = df[(df['quality'] > 4) & (df['quality'] < 8 )]\n",
    "\n",
    "# reset index and drop the old one\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "281e1d86a4803560ed5892cd7eda4c01",
     "grade": true,
     "grade_id": "cell-aed3da719d4682c7",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_df_drop(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xNR1iAlMRPXO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.9\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cwhuRpnVRTzG"
   },
   "source": [
    "You can plot again to see the new range of data and quality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "857ygzZiLgGg"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "n3k0vqSsp84t"
   },
   "source": [
    "### Train Test Split (TODO)\n",
    "\n",
    "Next, you can split the datasets into training, test and validation datasets.\n",
    "- The data frame should be split 80:20 into `train` and `test` sets.\n",
    "- The resulting `train` should then be split 80:20 into `train` and `val` sets.\n",
    "- The `train_test_split` parameter `test_size` takes a float value that ranges between 0. and 1, and represents the proportion of the dataset that is allocated to the test set.  The rest of the data is allocated to the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "PAVIf2-fgRVY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7f5738f4fb51d65adc9a8acbdf2b9970",
     "grade": false,
     "grade_id": "cell-91946cadf745206b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# Please do not change the random_state parameter. This is needed for grading.\n",
    "\n",
    "# split df into 80:20 train and test sets\n",
    "train, test = train_test_split(df, test_size=0.2, random_state = 1)\n",
    "                               \n",
    "# split train into 80:20 train and val sets\n",
    "train, val = train_test_split(train, test_size=0.2, random_state = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "editable": false,
    "id": "57h9LcEzRWpk",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "42adbe9e66efac7c7a5f8cd73ac92f22",
     "grade": true,
     "grade_id": "cell-64b8b38cd0b965f6",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_data_sizes(train.size, test.size, val.size)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RwTNu4KFqG-K"
   },
   "source": [
    "Here's where you can explore the training stats. You can pop the labels 'is_red' and 'quality' from the data as these will be used as the labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y_afyhhHM6WQ"
   },
   "outputs": [],
   "source": [
    "train_stats = train.describe()\n",
    "train_stats.pop('is_red')\n",
    "train_stats.pop('quality')\n",
    "train_stats = train_stats.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ahvbYm4fNqSt"
   },
   "source": [
    "Explore the training stats!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n_gAtPjZ0otF"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fixed acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>7.221616</td>\n",
       "      <td>1.325297</td>\n",
       "      <td>3.80000</td>\n",
       "      <td>6.40000</td>\n",
       "      <td>7.00000</td>\n",
       "      <td>7.7000</td>\n",
       "      <td>15.60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>volatile acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.338929</td>\n",
       "      <td>0.162476</td>\n",
       "      <td>0.08000</td>\n",
       "      <td>0.23000</td>\n",
       "      <td>0.29000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.24000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>citric acid</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.321569</td>\n",
       "      <td>0.147970</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.31000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.66000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>residual sugar</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>5.155911</td>\n",
       "      <td>4.639632</td>\n",
       "      <td>0.60000</td>\n",
       "      <td>1.80000</td>\n",
       "      <td>2.80000</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>65.80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chlorides</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.056976</td>\n",
       "      <td>0.036802</td>\n",
       "      <td>0.01200</td>\n",
       "      <td>0.03800</td>\n",
       "      <td>0.04700</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.61100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>30.388590</td>\n",
       "      <td>17.236784</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>28.00000</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>131.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>115.062282</td>\n",
       "      <td>56.706617</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>75.00000</td>\n",
       "      <td>117.00000</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>344.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>density</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.994633</td>\n",
       "      <td>0.003005</td>\n",
       "      <td>0.98711</td>\n",
       "      <td>0.99232</td>\n",
       "      <td>0.99481</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>1.03898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pH</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>3.223201</td>\n",
       "      <td>0.161272</td>\n",
       "      <td>2.72000</td>\n",
       "      <td>3.11000</td>\n",
       "      <td>3.21000</td>\n",
       "      <td>3.3300</td>\n",
       "      <td>4.01000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sulphates</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.534051</td>\n",
       "      <td>0.149149</td>\n",
       "      <td>0.22000</td>\n",
       "      <td>0.43000</td>\n",
       "      <td>0.51000</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>1.95000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcohol</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>10.504466</td>\n",
       "      <td>1.154654</td>\n",
       "      <td>8.50000</td>\n",
       "      <td>9.50000</td>\n",
       "      <td>10.30000</td>\n",
       "      <td>11.3000</td>\n",
       "      <td>14.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count        mean        std      min       25%  \\\n",
       "fixed acidity         3155.0    7.221616   1.325297  3.80000   6.40000   \n",
       "volatile acidity      3155.0    0.338929   0.162476  0.08000   0.23000   \n",
       "citric acid           3155.0    0.321569   0.147970  0.00000   0.25000   \n",
       "residual sugar        3155.0    5.155911   4.639632  0.60000   1.80000   \n",
       "chlorides             3155.0    0.056976   0.036802  0.01200   0.03800   \n",
       "free sulfur dioxide   3155.0   30.388590  17.236784  1.00000  17.00000   \n",
       "total sulfur dioxide  3155.0  115.062282  56.706617  6.00000  75.00000   \n",
       "density               3155.0    0.994633   0.003005  0.98711   0.99232   \n",
       "pH                    3155.0    3.223201   0.161272  2.72000   3.11000   \n",
       "sulphates             3155.0    0.534051   0.149149  0.22000   0.43000   \n",
       "alcohol               3155.0   10.504466   1.154654  8.50000   9.50000   \n",
       "\n",
       "                            50%       75%        max  \n",
       "fixed acidity           7.00000    7.7000   15.60000  \n",
       "volatile acidity        0.29000    0.4000    1.24000  \n",
       "citric acid             0.31000    0.4000    1.66000  \n",
       "residual sugar          2.80000    7.6500   65.80000  \n",
       "chlorides               0.04700    0.0660    0.61100  \n",
       "free sulfur dioxide    28.00000   41.0000  131.00000  \n",
       "total sulfur dioxide  117.00000  156.0000  344.00000  \n",
       "density                 0.99481    0.9968    1.03898  \n",
       "pH                      3.21000    3.3300    4.01000  \n",
       "sulphates               0.51000    0.6000    1.95000  \n",
       "alcohol                10.30000   11.3000   14.00000  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bGPvt9jir_HC"
   },
   "source": [
    "### Get the labels (TODO)\n",
    "\n",
    "The features and labels are currently in the same dataframe.\n",
    "- You will want to store the label columns `is_red` and `quality` separately from the feature columns.  \n",
    "- The following function, `format_output`, gets these two columns from the dataframe (it's given to you).\n",
    "- `format_output` also formats the data into numpy arrays. \n",
    "- Please use the `format_output` and apply it to the `train`, `val` and `test` sets to get dataframes for the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Z_fs14XQqZVP"
   },
   "outputs": [],
   "source": [
    "def format_output(data):\n",
    "    is_red = data.pop('is_red')\n",
    "    is_red = np.array(is_red)\n",
    "    quality = data.pop('quality')\n",
    "    quality = np.array(quality)\n",
    "    return (quality, is_red)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8L3ZZe1fQicm",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7a86809e54895a816434c48dc903f55d",
     "grade": false,
     "grade_id": "cell-5c30fa2c2a354b0f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# format the output of the train set\n",
    "train_Y = format_output(train)\n",
    "\n",
    "# format the output of the val set\n",
    "val_Y = format_output(val)\n",
    "    \n",
    "# format the output of the test set\n",
    "test_Y = format_output(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "359cabbafaed14ec9bbc1e57a7b6f32c",
     "grade": true,
     "grade_id": "cell-4977d8befb80f56b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_format_output(df, train_Y, val_Y, test_Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that after you get the labels, the `train`, `val` and `test` dataframes no longer contain the label columns, and contain just the feature columns.\n",
    "- This is because you used `.pop` in the `format_output` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>7.5</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.18</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.088</td>\n",
       "      <td>27.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.99915</td>\n",
       "      <td>3.38</td>\n",
       "      <td>0.77</td>\n",
       "      <td>9.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3557</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.29</td>\n",
       "      <td>12.2</td>\n",
       "      <td>0.044</td>\n",
       "      <td>59.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.99782</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.40</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>8.8</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.25</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.024</td>\n",
       "      <td>52.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.99250</td>\n",
       "      <td>2.87</td>\n",
       "      <td>0.49</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1740</th>\n",
       "      <td>6.4</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.030</td>\n",
       "      <td>10.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.99050</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.28</td>\n",
       "      <td>10.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1221</th>\n",
       "      <td>7.2</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.058</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.99573</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "225             7.5              0.65         0.18             7.0      0.088   \n",
       "3557            6.3              0.27         0.29            12.2      0.044   \n",
       "3825            8.8              0.27         0.25             5.0      0.024   \n",
       "1740            6.4              0.45         0.07             1.1      0.030   \n",
       "1221            7.2              0.53         0.13             2.0      0.058   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "225                  27.0                  94.0  0.99915  3.38       0.77   \n",
       "3557                 59.0                 196.0  0.99782  3.14       0.40   \n",
       "3825                 52.0                  99.0  0.99250  2.87       0.49   \n",
       "1740                 10.0                 131.0  0.99050  2.97       0.28   \n",
       "1221                 18.0                  22.0  0.99573  3.21       0.68   \n",
       "\n",
       "      alcohol  \n",
       "225       9.4  \n",
       "3557      8.8  \n",
       "3825     11.4  \n",
       "1740     10.8  \n",
       "1221      9.9  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hEdbrruAsN1D"
   },
   "source": [
    "### Normalize the data (TODO)\n",
    "\n",
    "Next, you can normalize the data, x, using the formula:\n",
    "$$x_{norm} = \\frac{x - \\mu}{\\sigma}$$\n",
    "- The `norm` function is defined for you.\n",
    "- Please apply the `norm` function to normalize the dataframes that contains the feature columns of `train`, `val` and `test` sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WWiZPAHCLjUs"
   },
   "outputs": [],
   "source": [
    "def norm(x):\n",
    "    return (x - train_stats['mean']) / train_stats['std']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "JEaOi2I2Lk69",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6bc0cdcb563d192f271067aa3373ff32",
     "grade": false,
     "grade_id": "cell-d8416d975c371095",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# normalize the train set\n",
    "norm_train_X = norm(train)\n",
    "    \n",
    "# normalize the val set\n",
    "norm_val_X = norm(val)\n",
    "    \n",
    "# normalize the test set\n",
    "norm_test_X = norm(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4f567db45bf40191601780379cc100b8",
     "grade": true,
     "grade_id": "cell-97fad979d157529b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_norm(norm_train_X, norm_val_X, norm_test_X, train, val, test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hzykDwQhsaPO"
   },
   "source": [
    "## Define the Model (TODO)\n",
    "\n",
    "Define the model using the functional API. The base model will be 2 `Dense` layers of 128 neurons each, and have the `'relu'` activation.\n",
    "- Check out the documentation for [tf.keras.layers.Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "Rhcns3oTFkM6",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "74b031247e569526552bf13a034a1c07",
     "grade": false,
     "grade_id": "cell-73fceedad1fe351c",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def base_model(inputs):\n",
    "    \n",
    "    # connect a Dense layer with 128 neurons and a relu activation\n",
    "    x = Dense(128, activation='relu')(inputs)\n",
    "    \n",
    "    # connect another Dense layer with 128 neurons and a relu activation\n",
    "    x = Dense(128, activation='relu')(x)\n",
    "    return x\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9255924b3def80f679616e4c851a43e1",
     "grade": true,
     "grade_id": "cell-54f742a133353d75",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_base_model(base_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xem_fcVws6Kz"
   },
   "source": [
    "# Define output layers of the model (TODO)\n",
    "\n",
    "You will add output layers to the base model. \n",
    "- The model will need two outputs.\n",
    "\n",
    "One output layer will predict wine quality, which is a numeric value.\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since this is a regression output, the activation can be left as its default value `None`.\n",
    "\n",
    "The other output layer will predict the wine type, which is either red `1` or not red `0` (white).\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since there are two possible categories, you can use a sigmoid activation for binary classification.\n",
    "\n",
    "Define the `Model`\n",
    "- Define the `Model` object, and set the following parameters:\n",
    "  - `inputs`: pass in the inputs to the model as a list.\n",
    "  - `outputs`: pass in a list of the outputs that you just defined: wine quality, then wine type.\n",
    "  - **Note**: please list the wine quality before wine type in the outputs, as this will affect the calculated loss if you choose the other order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "n5UGF8PMVLPt",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "76d35b90d20cdcbb22986cd8211057de",
     "grade": false,
     "grade_id": "cell-19e285f482f021fb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def final_model(inputs):\n",
    "    \n",
    "    # get the base model\n",
    "    x = base_model(inputs)\n",
    "\n",
    "    # connect the output Dense layer for regression\n",
    "    wine_quality = Dense(units='1', name='wine_quality')(x)\n",
    "\n",
    "    # connect the output Dense layer for classification. this will use a sigmoid activation.\n",
    "    wine_type = Dense(units='1', activation='sigmoid', name='wine_type')(x)\n",
    "\n",
    "    # define the model using the input and output layers\n",
    "    model = Model(inputs=[inputs], outputs=[wine_quality,wine_type])\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "89cbf89d8ab5e2e59ecf7f63f517520a",
     "grade": true,
     "grade_id": "cell-40d050f855c817d1",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_final_model(final_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5R0BMTsltZyu"
   },
   "source": [
    "## Compiling the Model\n",
    "\n",
    "Next, compile the model. When setting the loss parameter of `model.compile`, you're setting the loss for each of the two outputs (wine quality and wine type).\n",
    "\n",
    "To set more than one loss, use a dictionary of key-value pairs.\n",
    "- You can look at the docs for the losses [here](https://www.tensorflow.org/api_docs/python/tf/keras/losses#functions).\n",
    "    - **Note**: For the desired spelling, please look at the \"Functions\" section of the documentation and not the \"classes\" section on that same page.\n",
    "- wine_type: Since you will be performing binary classification on wine type, you should use the binary crossentropy loss function for it.  Please pass this in as a string.  \n",
    "  - **Hint**, this should be all lowercase.  In the documentation, you'll see this under the \"Functions\" section, not the \"Classes\" section.\n",
    "- wine_quality: since this is a regression output, use the mean squared error.  Please pass it in as a string, all lowercase.\n",
    "  - **Hint**: You may notice that there are two aliases for mean squared error.  Please use the shorter name.\n",
    "\n",
    "\n",
    "You will also set the metric for each of the two outputs.  Again, to set metrics for two or more outputs, use a dictionary with key value pairs.\n",
    "- The metrics documentation is linked [here](https://www.tensorflow.org/api_docs/python/tf/keras/metrics).\n",
    "- For the wine type, please set it to accuracy as a string, all lowercase.\n",
    "- For wine quality, please use the root mean squared error.  Instead of a string, you'll set it to an instance of the class [RootMeanSquaredError](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/RootMeanSquaredError), which belongs to the tf.keras.metrics module.\n",
    "\n",
    "**Note**: If you see the error message \n",
    ">Exception: wine quality loss function is incorrect.\n",
    "\n",
    "- Please also check your other losses and metrics, as the error may be caused by the other three key-value pairs and not the wine quality loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "LK11duUbUjmh",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "22f45067ca69eb2ccadb43874dbcc27b",
     "grade": false,
     "grade_id": "cell-81afdc4dcca51d5e",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "inputs = tf.keras.layers.Input(shape=(11,))\n",
    "rms = tf.keras.optimizers.RMSprop(lr=0.0001)\n",
    "model = final_model(inputs)\n",
    "rmse = tf.keras.metrics.RootMeanSquaredError()\n",
    "\n",
    "model.compile(optimizer=rms, \n",
    "              loss = {'wine_type' : 'binary_crossentropy',\n",
    "                      'wine_quality' : 'mse'\n",
    "                     },\n",
    "              metrics = {'wine_type' : 'accuracy',\n",
    "                         'wine_quality': rmse\n",
    "                       }\n",
    "             )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "88e02238ea5e456ff65e835cc8158054",
     "grade": true,
     "grade_id": "cell-2eeeba02391c4632",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_model_compile(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "90MpAMpWuKm-"
   },
   "source": [
    "## Training the Model\n",
    "\n",
    "Fit the model to the training inputs and outputs. \n",
    "- Check the documentation for [model.fit](https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit).\n",
    "- Remember to use the normalized training set as inputs. \n",
    "- For the validation data, please use the normalized validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "_eiZkle4XwiY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2ca7664be03bfd6fd3651ae44d17b793",
     "grade": false,
     "grade_id": "cell-0bb56262896f6680",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 3155 samples, validate on 789 samples\n",
      "Epoch 1/180\n",
      "3155/3155 [==============================] - 1s 345us/sample - loss: 24.9704 - wine_quality_loss: 24.3070 - wine_type_loss: 0.6315 - wine_quality_root_mean_squared_error: 4.9334 - wine_type_accuracy: 0.7477 - val_loss: 17.8444 - val_wine_quality_loss: 17.2609 - val_wine_type_loss: 0.5979 - val_wine_quality_root_mean_squared_error: 4.1529 - val_wine_type_accuracy: 0.8099\n",
      "Epoch 2/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 12.2608 - wine_quality_loss: 11.6790 - wine_type_loss: 0.5552 - wine_quality_root_mean_squared_error: 3.4213 - wine_type_accuracy: 0.8513 - val_loss: 7.2858 - val_wine_quality_loss: 6.8201 - val_wine_type_loss: 0.5141 - val_wine_quality_root_mean_squared_error: 2.6023 - val_wine_type_accuracy: 0.8226\n",
      "Epoch 3/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 4.8798 - wine_quality_loss: 4.4134 - wine_type_loss: 0.4578 - wine_quality_root_mean_squared_error: 2.1028 - wine_type_accuracy: 0.8558 - val_loss: 3.0507 - val_wine_quality_loss: 2.6971 - val_wine_type_loss: 0.4107 - val_wine_quality_root_mean_squared_error: 1.6248 - val_wine_type_accuracy: 0.8771\n",
      "Epoch 4/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 2.7993 - wine_quality_loss: 2.4433 - wine_type_loss: 0.3543 - wine_quality_root_mean_squared_error: 1.5636 - wine_type_accuracy: 0.9109 - val_loss: 2.3645 - val_wine_quality_loss: 2.0832 - val_wine_type_loss: 0.3177 - val_wine_quality_root_mean_squared_error: 1.4306 - val_wine_type_accuracy: 0.9328\n",
      "Epoch 5/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 2.2945 - wine_quality_loss: 2.0148 - wine_type_loss: 0.2754 - wine_quality_root_mean_squared_error: 1.4209 - wine_type_accuracy: 0.9496 - val_loss: 2.0233 - val_wine_quality_loss: 1.7978 - val_wine_type_loss: 0.2483 - val_wine_quality_root_mean_squared_error: 1.3322 - val_wine_type_accuracy: 0.9594\n",
      "Epoch 6/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 1.9849 - wine_quality_loss: 1.7700 - wine_type_loss: 0.2148 - wine_quality_root_mean_squared_error: 1.3304 - wine_type_accuracy: 0.9708 - val_loss: 1.7731 - val_wine_quality_loss: 1.5942 - val_wine_type_loss: 0.1942 - val_wine_quality_root_mean_squared_error: 1.2564 - val_wine_type_accuracy: 0.9772\n",
      "Epoch 7/180\n",
      "3155/3155 [==============================] - 0s 89us/sample - loss: 1.7529 - wine_quality_loss: 1.5832 - wine_type_loss: 0.1677 - wine_quality_root_mean_squared_error: 1.2590 - wine_type_accuracy: 0.9813 - val_loss: 1.5878 - val_wine_quality_loss: 1.4447 - val_wine_type_loss: 0.1523 - val_wine_quality_root_mean_squared_error: 1.1980 - val_wine_type_accuracy: 0.9835\n",
      "Epoch 8/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 1.5856 - wine_quality_loss: 1.4518 - wine_type_loss: 0.1344 - wine_quality_root_mean_squared_error: 1.2046 - wine_type_accuracy: 0.9835 - val_loss: 1.4487 - val_wine_quality_loss: 1.3321 - val_wine_type_loss: 0.1226 - val_wine_quality_root_mean_squared_error: 1.1514 - val_wine_type_accuracy: 0.9861\n",
      "Epoch 9/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 1.4553 - wine_quality_loss: 1.3447 - wine_type_loss: 0.1098 - wine_quality_root_mean_squared_error: 1.1599 - wine_type_accuracy: 0.9857 - val_loss: 1.3355 - val_wine_quality_loss: 1.2388 - val_wine_type_loss: 0.1003 - val_wine_quality_root_mean_squared_error: 1.1112 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 10/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 1.3435 - wine_quality_loss: 1.2503 - wine_type_loss: 0.0920 - wine_quality_root_mean_squared_error: 1.1186 - wine_type_accuracy: 0.9870 - val_loss: 1.2422 - val_wine_quality_loss: 1.1595 - val_wine_type_loss: 0.0844 - val_wine_quality_root_mean_squared_error: 1.0759 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 11/180\n",
      "3155/3155 [==============================] - 0s 74us/sample - loss: 1.2484 - wine_quality_loss: 1.1664 - wine_type_loss: 0.0796 - wine_quality_root_mean_squared_error: 1.0810 - wine_type_accuracy: 0.9876 - val_loss: 1.1660 - val_wine_quality_loss: 1.0936 - val_wine_type_loss: 0.0733 - val_wine_quality_root_mean_squared_error: 1.0452 - val_wine_type_accuracy: 0.9911\n",
      "Epoch 12/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 1.1728 - wine_quality_loss: 1.1013 - wine_type_loss: 0.0708 - wine_quality_root_mean_squared_error: 1.0497 - wine_type_accuracy: 0.9886 - val_loss: 1.0877 - val_wine_quality_loss: 1.0227 - val_wine_type_loss: 0.0654 - val_wine_quality_root_mean_squared_error: 1.0109 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 13/180\n",
      "3155/3155 [==============================] - 0s 89us/sample - loss: 1.0964 - wine_quality_loss: 1.0334 - wine_type_loss: 0.0640 - wine_quality_root_mean_squared_error: 1.0160 - wine_type_accuracy: 0.9899 - val_loss: 1.0252 - val_wine_quality_loss: 0.9657 - val_wine_type_loss: 0.0592 - val_wine_quality_root_mean_squared_error: 0.9827 - val_wine_type_accuracy: 0.9911\n",
      "Epoch 14/180\n",
      "3155/3155 [==============================] - 0s 74us/sample - loss: 1.0333 - wine_quality_loss: 0.9731 - wine_type_loss: 0.0589 - wine_quality_root_mean_squared_error: 0.9870 - wine_type_accuracy: 0.9899 - val_loss: 0.9555 - val_wine_quality_loss: 0.9005 - val_wine_type_loss: 0.0547 - val_wine_quality_root_mean_squared_error: 0.9489 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 15/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.9736 - wine_quality_loss: 0.9175 - wine_type_loss: 0.0548 - wine_quality_root_mean_squared_error: 0.9584 - wine_type_accuracy: 0.9899 - val_loss: 0.9039 - val_wine_quality_loss: 0.8522 - val_wine_type_loss: 0.0509 - val_wine_quality_root_mean_squared_error: 0.9234 - val_wine_type_accuracy: 0.9911\n",
      "Epoch 16/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.9171 - wine_quality_loss: 0.8647 - wine_type_loss: 0.0513 - wine_quality_root_mean_squared_error: 0.9304 - wine_type_accuracy: 0.9902 - val_loss: 0.8630 - val_wine_quality_loss: 0.8145 - val_wine_type_loss: 0.0478 - val_wine_quality_root_mean_squared_error: 0.9027 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 17/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.8673 - wine_quality_loss: 0.8193 - wine_type_loss: 0.0490 - wine_quality_root_mean_squared_error: 0.9046 - wine_type_accuracy: 0.9905 - val_loss: 0.8108 - val_wine_quality_loss: 0.7641 - val_wine_type_loss: 0.0454 - val_wine_quality_root_mean_squared_error: 0.8746 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 18/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.8213 - wine_quality_loss: 0.7889 - wine_type_loss: 0.0466 - wine_quality_root_mean_squared_error: 0.8802 - wine_type_accuracy: 0.9911 - val_loss: 0.7664 - val_wine_quality_loss: 0.7218 - val_wine_type_loss: 0.0436 - val_wine_quality_root_mean_squared_error: 0.8499 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 19/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.7788 - wine_quality_loss: 0.7337 - wine_type_loss: 0.0451 - wine_quality_root_mean_squared_error: 0.8567 - wine_type_accuracy: 0.9911 - val_loss: 0.7269 - val_wine_quality_loss: 0.6835 - val_wine_type_loss: 0.0421 - val_wine_quality_root_mean_squared_error: 0.8273 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 20/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.7394 - wine_quality_loss: 0.6952 - wine_type_loss: 0.0434 - wine_quality_root_mean_squared_error: 0.8343 - wine_type_accuracy: 0.9914 - val_loss: 0.6884 - val_wine_quality_loss: 0.6465 - val_wine_type_loss: 0.0408 - val_wine_quality_root_mean_squared_error: 0.8045 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 21/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.7054 - wine_quality_loss: 0.6634 - wine_type_loss: 0.0418 - wine_quality_root_mean_squared_error: 0.8145 - wine_type_accuracy: 0.9924 - val_loss: 0.6636 - val_wine_quality_loss: 0.6225 - val_wine_type_loss: 0.0397 - val_wine_quality_root_mean_squared_error: 0.7897 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 22/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.6750 - wine_quality_loss: 0.6342 - wine_type_loss: 0.0415 - wine_quality_root_mean_squared_error: 0.7964 - wine_type_accuracy: 0.9927 - val_loss: 0.6308 - val_wine_quality_loss: 0.5908 - val_wine_type_loss: 0.0386 - val_wine_quality_root_mean_squared_error: 0.7693 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 23/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.6417 - wine_quality_loss: 0.6013 - wine_type_loss: 0.0397 - wine_quality_root_mean_squared_error: 0.7760 - wine_type_accuracy: 0.9924 - val_loss: 0.5984 - val_wine_quality_loss: 0.5593 - val_wine_type_loss: 0.0380 - val_wine_quality_root_mean_squared_error: 0.7484 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 24/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.6136 - wine_quality_loss: 0.5748 - wine_type_loss: 0.0386 - wine_quality_root_mean_squared_error: 0.7582 - wine_type_accuracy: 0.9930 - val_loss: 0.5713 - val_wine_quality_loss: 0.5328 - val_wine_type_loss: 0.0372 - val_wine_quality_root_mean_squared_error: 0.7306 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 25/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.5880 - wine_quality_loss: 0.5504 - wine_type_loss: 0.0378 - wine_quality_root_mean_squared_error: 0.7417 - wine_type_accuracy: 0.9927 - val_loss: 0.5521 - val_wine_quality_loss: 0.5139 - val_wine_type_loss: 0.0367 - val_wine_quality_root_mean_squared_error: 0.7176 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 26/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.5651 - wine_quality_loss: 0.5280 - wine_type_loss: 0.0385 - wine_quality_root_mean_squared_error: 0.7267 - wine_type_accuracy: 0.9930 - val_loss: 0.5302 - val_wine_quality_loss: 0.4929 - val_wine_type_loss: 0.0362 - val_wine_quality_root_mean_squared_error: 0.7026 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 27/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.5408 - wine_quality_loss: 0.5053 - wine_type_loss: 0.0363 - wine_quality_root_mean_squared_error: 0.7102 - wine_type_accuracy: 0.9930 - val_loss: 0.5096 - val_wine_quality_loss: 0.4725 - val_wine_type_loss: 0.0358 - val_wine_quality_root_mean_squared_error: 0.6880 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 28/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.5202 - wine_quality_loss: 0.4845 - wine_type_loss: 0.0358 - wine_quality_root_mean_squared_error: 0.6960 - wine_type_accuracy: 0.9927 - val_loss: 0.4964 - val_wine_quality_loss: 0.4592 - val_wine_type_loss: 0.0355 - val_wine_quality_root_mean_squared_error: 0.6786 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 29/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.5008 - wine_quality_loss: 0.4677 - wine_type_loss: 0.0353 - wine_quality_root_mean_squared_error: 0.6824 - wine_type_accuracy: 0.9930 - val_loss: 0.4935 - val_wine_quality_loss: 0.4571 - val_wine_type_loss: 0.0351 - val_wine_quality_root_mean_squared_error: 0.6768 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 30/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.4854 - wine_quality_loss: 0.4505 - wine_type_loss: 0.0346 - wine_quality_root_mean_squared_error: 0.6713 - wine_type_accuracy: 0.9933 - val_loss: 0.4686 - val_wine_quality_loss: 0.4323 - val_wine_type_loss: 0.0349 - val_wine_quality_root_mean_squared_error: 0.6583 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 31/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.4717 - wine_quality_loss: 0.4367 - wine_type_loss: 0.0341 - wine_quality_root_mean_squared_error: 0.6614 - wine_type_accuracy: 0.9933 - val_loss: 0.4438 - val_wine_quality_loss: 0.4082 - val_wine_type_loss: 0.0345 - val_wine_quality_root_mean_squared_error: 0.6395 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 32/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.4577 - wine_quality_loss: 0.4231 - wine_type_loss: 0.0338 - wine_quality_root_mean_squared_error: 0.6511 - wine_type_accuracy: 0.9940 - val_loss: 0.4379 - val_wine_quality_loss: 0.4025 - val_wine_type_loss: 0.0341 - val_wine_quality_root_mean_squared_error: 0.6352 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 33/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.4458 - wine_quality_loss: 0.4124 - wine_type_loss: 0.0336 - wine_quality_root_mean_squared_error: 0.6423 - wine_type_accuracy: 0.9940 - val_loss: 0.4297 - val_wine_quality_loss: 0.3947 - val_wine_type_loss: 0.0339 - val_wine_quality_root_mean_squared_error: 0.6289 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 34/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.4339 - wine_quality_loss: 0.4008 - wine_type_loss: 0.0327 - wine_quality_root_mean_squared_error: 0.6333 - wine_type_accuracy: 0.9943 - val_loss: 0.4143 - val_wine_quality_loss: 0.3794 - val_wine_type_loss: 0.0337 - val_wine_quality_root_mean_squared_error: 0.6166 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 35/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.4239 - wine_quality_loss: 0.3905 - wine_type_loss: 0.0324 - wine_quality_root_mean_squared_error: 0.6256 - wine_type_accuracy: 0.9943 - val_loss: 0.4102 - val_wine_quality_loss: 0.3757 - val_wine_type_loss: 0.0335 - val_wine_quality_root_mean_squared_error: 0.6135 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 36/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.4149 - wine_quality_loss: 0.3825 - wine_type_loss: 0.0321 - wine_quality_root_mean_squared_error: 0.6187 - wine_type_accuracy: 0.9943 - val_loss: 0.4022 - val_wine_quality_loss: 0.3672 - val_wine_type_loss: 0.0333 - val_wine_quality_root_mean_squared_error: 0.6070 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 37/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.4075 - wine_quality_loss: 0.3751 - wine_type_loss: 0.0321 - wine_quality_root_mean_squared_error: 0.6130 - wine_type_accuracy: 0.9943 - val_loss: 0.3948 - val_wine_quality_loss: 0.3602 - val_wine_type_loss: 0.0332 - val_wine_quality_root_mean_squared_error: 0.6010 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 38/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.4000 - wine_quality_loss: 0.3680 - wine_type_loss: 0.0313 - wine_quality_root_mean_squared_error: 0.6071 - wine_type_accuracy: 0.9943 - val_loss: 0.3877 - val_wine_quality_loss: 0.3536 - val_wine_type_loss: 0.0330 - val_wine_quality_root_mean_squared_error: 0.5952 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 39/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3936 - wine_quality_loss: 0.3621 - wine_type_loss: 0.0311 - wine_quality_root_mean_squared_error: 0.6021 - wine_type_accuracy: 0.9943 - val_loss: 0.3825 - val_wine_quality_loss: 0.3482 - val_wine_type_loss: 0.0329 - val_wine_quality_root_mean_squared_error: 0.5909 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 40/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3866 - wine_quality_loss: 0.3552 - wine_type_loss: 0.0310 - wine_quality_root_mean_squared_error: 0.5965 - wine_type_accuracy: 0.9946 - val_loss: 0.3828 - val_wine_quality_loss: 0.3488 - val_wine_type_loss: 0.0327 - val_wine_quality_root_mean_squared_error: 0.5914 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 41/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.3823 - wine_quality_loss: 0.3521 - wine_type_loss: 0.0303 - wine_quality_root_mean_squared_error: 0.5932 - wine_type_accuracy: 0.9943 - val_loss: 0.3728 - val_wine_quality_loss: 0.3386 - val_wine_type_loss: 0.0327 - val_wine_quality_root_mean_squared_error: 0.5828 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 42/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3765 - wine_quality_loss: 0.3464 - wine_type_loss: 0.0302 - wine_quality_root_mean_squared_error: 0.5885 - wine_type_accuracy: 0.9946 - val_loss: 0.3755 - val_wine_quality_loss: 0.3419 - val_wine_type_loss: 0.0325 - val_wine_quality_root_mean_squared_error: 0.5853 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 43/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.3731 - wine_quality_loss: 0.3431 - wine_type_loss: 0.0298 - wine_quality_root_mean_squared_error: 0.5858 - wine_type_accuracy: 0.9946 - val_loss: 0.3675 - val_wine_quality_loss: 0.3337 - val_wine_type_loss: 0.0325 - val_wine_quality_root_mean_squared_error: 0.5784 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 44/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3689 - wine_quality_loss: 0.3394 - wine_type_loss: 0.0296 - wine_quality_root_mean_squared_error: 0.5824 - wine_type_accuracy: 0.9946 - val_loss: 0.3636 - val_wine_quality_loss: 0.3299 - val_wine_type_loss: 0.0323 - val_wine_quality_root_mean_squared_error: 0.5752 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 45/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 0.3658 - wine_quality_loss: 0.3360 - wine_type_loss: 0.0294 - wine_quality_root_mean_squared_error: 0.5800 - wine_type_accuracy: 0.9946 - val_loss: 0.3602 - val_wine_quality_loss: 0.3267 - val_wine_type_loss: 0.0322 - val_wine_quality_root_mean_squared_error: 0.5724 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 46/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3618 - wine_quality_loss: 0.3324 - wine_type_loss: 0.0290 - wine_quality_root_mean_squared_error: 0.5767 - wine_type_accuracy: 0.9946 - val_loss: 0.3608 - val_wine_quality_loss: 0.3274 - val_wine_type_loss: 0.0322 - val_wine_quality_root_mean_squared_error: 0.5729 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 47/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 0.3585 - wine_quality_loss: 0.3294 - wine_type_loss: 0.0290 - wine_quality_root_mean_squared_error: 0.5740 - wine_type_accuracy: 0.9946 - val_loss: 0.3591 - val_wine_quality_loss: 0.3255 - val_wine_type_loss: 0.0322 - val_wine_quality_root_mean_squared_error: 0.5714 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 48/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3544 - wine_quality_loss: 0.3255 - wine_type_loss: 0.0286 - wine_quality_root_mean_squared_error: 0.5707 - wine_type_accuracy: 0.9946 - val_loss: 0.3552 - val_wine_quality_loss: 0.3218 - val_wine_type_loss: 0.0321 - val_wine_quality_root_mean_squared_error: 0.5681 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 49/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3528 - wine_quality_loss: 0.3248 - wine_type_loss: 0.0284 - wine_quality_root_mean_squared_error: 0.5695 - wine_type_accuracy: 0.9946 - val_loss: 0.3513 - val_wine_quality_loss: 0.3181 - val_wine_type_loss: 0.0319 - val_wine_quality_root_mean_squared_error: 0.5648 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 50/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3495 - wine_quality_loss: 0.3214 - wine_type_loss: 0.0282 - wine_quality_root_mean_squared_error: 0.5668 - wine_type_accuracy: 0.9946 - val_loss: 0.3550 - val_wine_quality_loss: 0.3220 - val_wine_type_loss: 0.0319 - val_wine_quality_root_mean_squared_error: 0.5681 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 51/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3482 - wine_quality_loss: 0.3198 - wine_type_loss: 0.0279 - wine_quality_root_mean_squared_error: 0.5658 - wine_type_accuracy: 0.9946 - val_loss: 0.3487 - val_wine_quality_loss: 0.3159 - val_wine_type_loss: 0.0317 - val_wine_quality_root_mean_squared_error: 0.5627 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 52/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3464 - wine_quality_loss: 0.3180 - wine_type_loss: 0.0277 - wine_quality_root_mean_squared_error: 0.5645 - wine_type_accuracy: 0.9946 - val_loss: 0.3487 - val_wine_quality_loss: 0.3158 - val_wine_type_loss: 0.0317 - val_wine_quality_root_mean_squared_error: 0.5627 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 53/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.3425 - wine_quality_loss: 0.3150 - wine_type_loss: 0.0275 - wine_quality_root_mean_squared_error: 0.5612 - wine_type_accuracy: 0.9946 - val_loss: 0.3509 - val_wine_quality_loss: 0.3180 - val_wine_type_loss: 0.0317 - val_wine_quality_root_mean_squared_error: 0.5646 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 54/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3420 - wine_quality_loss: 0.3148 - wine_type_loss: 0.0273 - wine_quality_root_mean_squared_error: 0.5609 - wine_type_accuracy: 0.9946 - val_loss: 0.3463 - val_wine_quality_loss: 0.3136 - val_wine_type_loss: 0.0316 - val_wine_quality_root_mean_squared_error: 0.5606 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 55/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.3395 - wine_quality_loss: 0.3131 - wine_type_loss: 0.0271 - wine_quality_root_mean_squared_error: 0.5589 - wine_type_accuracy: 0.9946 - val_loss: 0.3432 - val_wine_quality_loss: 0.3104 - val_wine_type_loss: 0.0316 - val_wine_quality_root_mean_squared_error: 0.5579 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 56/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.3360 - wine_quality_loss: 0.3090 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.5559 - wine_type_accuracy: 0.9946 - val_loss: 0.3435 - val_wine_quality_loss: 0.3110 - val_wine_type_loss: 0.0314 - val_wine_quality_root_mean_squared_error: 0.5584 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 57/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3366 - wine_quality_loss: 0.3102 - wine_type_loss: 0.0267 - wine_quality_root_mean_squared_error: 0.5566 - wine_type_accuracy: 0.9949 - val_loss: 0.3448 - val_wine_quality_loss: 0.3121 - val_wine_type_loss: 0.0314 - val_wine_quality_root_mean_squared_error: 0.5594 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 58/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3342 - wine_quality_loss: 0.3072 - wine_type_loss: 0.0266 - wine_quality_root_mean_squared_error: 0.5546 - wine_type_accuracy: 0.9946 - val_loss: 0.3453 - val_wine_quality_loss: 0.3126 - val_wine_type_loss: 0.0313 - val_wine_quality_root_mean_squared_error: 0.5600 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 59/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.3335 - wine_quality_loss: 0.3071 - wine_type_loss: 0.0267 - wine_quality_root_mean_squared_error: 0.5541 - wine_type_accuracy: 0.9949 - val_loss: 0.3457 - val_wine_quality_loss: 0.3132 - val_wine_type_loss: 0.0314 - val_wine_quality_root_mean_squared_error: 0.5603 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 60/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.3322 - wine_quality_loss: 0.3055 - wine_type_loss: 0.0262 - wine_quality_root_mean_squared_error: 0.5532 - wine_type_accuracy: 0.9949 - val_loss: 0.3396 - val_wine_quality_loss: 0.3071 - val_wine_type_loss: 0.0312 - val_wine_quality_root_mean_squared_error: 0.5549 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 61/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3300 - wine_quality_loss: 0.3036 - wine_type_loss: 0.0260 - wine_quality_root_mean_squared_error: 0.5513 - wine_type_accuracy: 0.9949 - val_loss: 0.3425 - val_wine_quality_loss: 0.3100 - val_wine_type_loss: 0.0312 - val_wine_quality_root_mean_squared_error: 0.5576 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 62/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3289 - wine_quality_loss: 0.3030 - wine_type_loss: 0.0258 - wine_quality_root_mean_squared_error: 0.5504 - wine_type_accuracy: 0.9949 - val_loss: 0.3452 - val_wine_quality_loss: 0.3126 - val_wine_type_loss: 0.0311 - val_wine_quality_root_mean_squared_error: 0.5601 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 63/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.3276 - wine_quality_loss: 0.3015 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.5494 - wine_type_accuracy: 0.9949 - val_loss: 0.3477 - val_wine_quality_loss: 0.3155 - val_wine_type_loss: 0.0310 - val_wine_quality_root_mean_squared_error: 0.5625 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 64/180\n",
      "3155/3155 [==============================] - 0s 84us/sample - loss: 0.3260 - wine_quality_loss: 0.3001 - wine_type_loss: 0.0254 - wine_quality_root_mean_squared_error: 0.5481 - wine_type_accuracy: 0.9949 - val_loss: 0.3517 - val_wine_quality_loss: 0.3194 - val_wine_type_loss: 0.0310 - val_wine_quality_root_mean_squared_error: 0.5659 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 65/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3259 - wine_quality_loss: 0.3005 - wine_type_loss: 0.0254 - wine_quality_root_mean_squared_error: 0.5481 - wine_type_accuracy: 0.9949 - val_loss: 0.3374 - val_wine_quality_loss: 0.3052 - val_wine_type_loss: 0.0309 - val_wine_quality_root_mean_squared_error: 0.5533 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 66/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.3241 - wine_quality_loss: 0.2990 - wine_type_loss: 0.0251 - wine_quality_root_mean_squared_error: 0.5467 - wine_type_accuracy: 0.9949 - val_loss: 0.3364 - val_wine_quality_loss: 0.3043 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5525 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 67/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3224 - wine_quality_loss: 0.2977 - wine_type_loss: 0.0251 - wine_quality_root_mean_squared_error: 0.5453 - wine_type_accuracy: 0.9949 - val_loss: 0.3458 - val_wine_quality_loss: 0.3138 - val_wine_type_loss: 0.0307 - val_wine_quality_root_mean_squared_error: 0.5609 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 68/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.3214 - wine_quality_loss: 0.2964 - wine_type_loss: 0.0249 - wine_quality_root_mean_squared_error: 0.5445 - wine_type_accuracy: 0.9952 - val_loss: 0.3507 - val_wine_quality_loss: 0.3190 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5652 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 69/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3195 - wine_quality_loss: 0.2950 - wine_type_loss: 0.0247 - wine_quality_root_mean_squared_error: 0.5429 - wine_type_accuracy: 0.9949 - val_loss: 0.3419 - val_wine_quality_loss: 0.3098 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5574 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 70/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3179 - wine_quality_loss: 0.2931 - wine_type_loss: 0.0246 - wine_quality_root_mean_squared_error: 0.5415 - wine_type_accuracy: 0.9952 - val_loss: 0.3383 - val_wine_quality_loss: 0.3063 - val_wine_type_loss: 0.0307 - val_wine_quality_root_mean_squared_error: 0.5542 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 71/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.3191 - wine_quality_loss: 0.2948 - wine_type_loss: 0.0244 - wine_quality_root_mean_squared_error: 0.5428 - wine_type_accuracy: 0.9949 - val_loss: 0.3368 - val_wine_quality_loss: 0.3047 - val_wine_type_loss: 0.0307 - val_wine_quality_root_mean_squared_error: 0.5529 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 72/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.3176 - wine_quality_loss: 0.2930 - wine_type_loss: 0.0243 - wine_quality_root_mean_squared_error: 0.5415 - wine_type_accuracy: 0.9949 - val_loss: 0.3407 - val_wine_quality_loss: 0.3089 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5565 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 73/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3168 - wine_quality_loss: 0.2928 - wine_type_loss: 0.0241 - wine_quality_root_mean_squared_error: 0.5410 - wine_type_accuracy: 0.9949 - val_loss: 0.3389 - val_wine_quality_loss: 0.3069 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5549 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 74/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3157 - wine_quality_loss: 0.2924 - wine_type_loss: 0.0241 - wine_quality_root_mean_squared_error: 0.5400 - wine_type_accuracy: 0.9952 - val_loss: 0.3346 - val_wine_quality_loss: 0.3027 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5510 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 75/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3143 - wine_quality_loss: 0.2903 - wine_type_loss: 0.0238 - wine_quality_root_mean_squared_error: 0.5389 - wine_type_accuracy: 0.9952 - val_loss: 0.3341 - val_wine_quality_loss: 0.3023 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5506 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 76/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3133 - wine_quality_loss: 0.2899 - wine_type_loss: 0.0236 - wine_quality_root_mean_squared_error: 0.5382 - wine_type_accuracy: 0.9956 - val_loss: 0.3411 - val_wine_quality_loss: 0.3095 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5569 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 77/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3119 - wine_quality_loss: 0.2881 - wine_type_loss: 0.0236 - wine_quality_root_mean_squared_error: 0.5369 - wine_type_accuracy: 0.9956 - val_loss: 0.3338 - val_wine_quality_loss: 0.3021 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5503 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 78/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3115 - wine_quality_loss: 0.2879 - wine_type_loss: 0.0234 - wine_quality_root_mean_squared_error: 0.5367 - wine_type_accuracy: 0.9952 - val_loss: 0.3427 - val_wine_quality_loss: 0.3109 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5584 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 79/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.3111 - wine_quality_loss: 0.2879 - wine_type_loss: 0.0233 - wine_quality_root_mean_squared_error: 0.5364 - wine_type_accuracy: 0.9952 - val_loss: 0.3354 - val_wine_quality_loss: 0.3037 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5518 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 80/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.3100 - wine_quality_loss: 0.2868 - wine_type_loss: 0.0232 - wine_quality_root_mean_squared_error: 0.5355 - wine_type_accuracy: 0.9956 - val_loss: 0.3369 - val_wine_quality_loss: 0.3054 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5532 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 81/180\n",
      "3155/3155 [==============================] - 0s 74us/sample - loss: 0.3098 - wine_quality_loss: 0.2870 - wine_type_loss: 0.0230 - wine_quality_root_mean_squared_error: 0.5355 - wine_type_accuracy: 0.9956 - val_loss: 0.3438 - val_wine_quality_loss: 0.3120 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5593 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 82/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3090 - wine_quality_loss: 0.2864 - wine_type_loss: 0.0229 - wine_quality_root_mean_squared_error: 0.5348 - wine_type_accuracy: 0.9956 - val_loss: 0.3356 - val_wine_quality_loss: 0.3040 - val_wine_type_loss: 0.0304 - val_wine_quality_root_mean_squared_error: 0.5520 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 83/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3069 - wine_quality_loss: 0.2839 - wine_type_loss: 0.0228 - wine_quality_root_mean_squared_error: 0.5330 - wine_type_accuracy: 0.9956 - val_loss: 0.3379 - val_wine_quality_loss: 0.3065 - val_wine_type_loss: 0.0304 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 84/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.3078 - wine_quality_loss: 0.2852 - wine_type_loss: 0.0226 - wine_quality_root_mean_squared_error: 0.5340 - wine_type_accuracy: 0.9956 - val_loss: 0.3355 - val_wine_quality_loss: 0.3038 - val_wine_type_loss: 0.0304 - val_wine_quality_root_mean_squared_error: 0.5520 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 85/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.3055 - wine_quality_loss: 0.2834 - wine_type_loss: 0.0225 - wine_quality_root_mean_squared_error: 0.5320 - wine_type_accuracy: 0.9959 - val_loss: 0.3451 - val_wine_quality_loss: 0.3135 - val_wine_type_loss: 0.0303 - val_wine_quality_root_mean_squared_error: 0.5607 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 86/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.3053 - wine_quality_loss: 0.2825 - wine_type_loss: 0.0224 - wine_quality_root_mean_squared_error: 0.5318 - wine_type_accuracy: 0.9956 - val_loss: 0.3420 - val_wine_quality_loss: 0.3107 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5581 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 87/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.3049 - wine_quality_loss: 0.2822 - wine_type_loss: 0.0223 - wine_quality_root_mean_squared_error: 0.5315 - wine_type_accuracy: 0.9956 - val_loss: 0.3358 - val_wine_quality_loss: 0.3046 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5525 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 88/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.3033 - wine_quality_loss: 0.2810 - wine_type_loss: 0.0221 - wine_quality_root_mean_squared_error: 0.5302 - wine_type_accuracy: 0.9956 - val_loss: 0.3443 - val_wine_quality_loss: 0.3128 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5601 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 89/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.3033 - wine_quality_loss: 0.2818 - wine_type_loss: 0.0220 - wine_quality_root_mean_squared_error: 0.5304 - wine_type_accuracy: 0.9956 - val_loss: 0.3389 - val_wine_quality_loss: 0.3074 - val_wine_type_loss: 0.0303 - val_wine_quality_root_mean_squared_error: 0.5552 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 90/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.3028 - wine_quality_loss: 0.2807 - wine_type_loss: 0.0221 - wine_quality_root_mean_squared_error: 0.5299 - wine_type_accuracy: 0.9959 - val_loss: 0.3392 - val_wine_quality_loss: 0.3079 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5555 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 91/180\n",
      "3155/3155 [==============================] - 0s 69us/sample - loss: 0.3021 - wine_quality_loss: 0.2798 - wine_type_loss: 0.0218 - wine_quality_root_mean_squared_error: 0.5294 - wine_type_accuracy: 0.9959 - val_loss: 0.3300 - val_wine_quality_loss: 0.2989 - val_wine_type_loss: 0.0301 - val_wine_quality_root_mean_squared_error: 0.5473 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 92/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.3003 - wine_quality_loss: 0.2782 - wine_type_loss: 0.0216 - wine_quality_root_mean_squared_error: 0.5278 - wine_type_accuracy: 0.9959 - val_loss: 0.3444 - val_wine_quality_loss: 0.3133 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5605 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 93/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.3005 - wine_quality_loss: 0.2790 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5281 - wine_type_accuracy: 0.9959 - val_loss: 0.3338 - val_wine_quality_loss: 0.3028 - val_wine_type_loss: 0.0300 - val_wine_quality_root_mean_squared_error: 0.5509 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 94/180\n",
      "3155/3155 [==============================] - 0s 84us/sample - loss: 0.2993 - wine_quality_loss: 0.2779 - wine_type_loss: 0.0214 - wine_quality_root_mean_squared_error: 0.5270 - wine_type_accuracy: 0.9959 - val_loss: 0.3358 - val_wine_quality_loss: 0.3048 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5527 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 95/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2982 - wine_quality_loss: 0.2775 - wine_type_loss: 0.0213 - wine_quality_root_mean_squared_error: 0.5262 - wine_type_accuracy: 0.9959 - val_loss: 0.3323 - val_wine_quality_loss: 0.3013 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5495 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 96/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2990 - wine_quality_loss: 0.2778 - wine_type_loss: 0.0212 - wine_quality_root_mean_squared_error: 0.5270 - wine_type_accuracy: 0.9959 - val_loss: 0.3330 - val_wine_quality_loss: 0.3018 - val_wine_type_loss: 0.0300 - val_wine_quality_root_mean_squared_error: 0.5501 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 97/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2968 - wine_quality_loss: 0.2755 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5250 - wine_type_accuracy: 0.9959 - val_loss: 0.3454 - val_wine_quality_loss: 0.3148 - val_wine_type_loss: 0.0298 - val_wine_quality_root_mean_squared_error: 0.5615 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 98/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2980 - wine_quality_loss: 0.2764 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.5262 - wine_type_accuracy: 0.9959 - val_loss: 0.3314 - val_wine_quality_loss: 0.3005 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5489 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 99/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2972 - wine_quality_loss: 0.2761 - wine_type_loss: 0.0209 - wine_quality_root_mean_squared_error: 0.5257 - wine_type_accuracy: 0.9959 - val_loss: 0.3437 - val_wine_quality_loss: 0.3126 - val_wine_type_loss: 0.0298 - val_wine_quality_root_mean_squared_error: 0.5600 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 100/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2955 - wine_quality_loss: 0.2750 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5241 - wine_type_accuracy: 0.9962 - val_loss: 0.3439 - val_wine_quality_loss: 0.3131 - val_wine_type_loss: 0.0298 - val_wine_quality_root_mean_squared_error: 0.5601 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 101/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2960 - wine_quality_loss: 0.2754 - wine_type_loss: 0.0209 - wine_quality_root_mean_squared_error: 0.5246 - wine_type_accuracy: 0.9962 - val_loss: 0.3334 - val_wine_quality_loss: 0.3029 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5508 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 102/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2954 - wine_quality_loss: 0.2746 - wine_type_loss: 0.0206 - wine_quality_root_mean_squared_error: 0.5241 - wine_type_accuracy: 0.9962 - val_loss: 0.3303 - val_wine_quality_loss: 0.2997 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5480 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 103/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2946 - wine_quality_loss: 0.2735 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.5235 - wine_type_accuracy: 0.9959 - val_loss: 0.3343 - val_wine_quality_loss: 0.3035 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5516 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 104/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2931 - wine_quality_loss: 0.2730 - wine_type_loss: 0.0213 - wine_quality_root_mean_squared_error: 0.5222 - wine_type_accuracy: 0.9962 - val_loss: 0.3385 - val_wine_quality_loss: 0.3078 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5556 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 105/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2923 - wine_quality_loss: 0.2720 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.5215 - wine_type_accuracy: 0.9959 - val_loss: 0.3409 - val_wine_quality_loss: 0.3100 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5575 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 106/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2925 - wine_quality_loss: 0.2722 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.5218 - wine_type_accuracy: 0.9962 - val_loss: 0.3432 - val_wine_quality_loss: 0.3126 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5596 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 107/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2920 - wine_quality_loss: 0.2725 - wine_type_loss: 0.0201 - wine_quality_root_mean_squared_error: 0.5213 - wine_type_accuracy: 0.9962 - val_loss: 0.3308 - val_wine_quality_loss: 0.3005 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5485 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 108/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2924 - wine_quality_loss: 0.2722 - wine_type_loss: 0.0200 - wine_quality_root_mean_squared_error: 0.5219 - wine_type_accuracy: 0.9962 - val_loss: 0.3321 - val_wine_quality_loss: 0.3016 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5497 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 109/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2893 - wine_quality_loss: 0.2693 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5190 - wine_type_accuracy: 0.9962 - val_loss: 0.3320 - val_wine_quality_loss: 0.3015 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5496 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 110/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2914 - wine_quality_loss: 0.2718 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5211 - wine_type_accuracy: 0.9962 - val_loss: 0.3362 - val_wine_quality_loss: 0.3058 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5534 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 111/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2894 - wine_quality_loss: 0.2695 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5193 - wine_type_accuracy: 0.9962 - val_loss: 0.3380 - val_wine_quality_loss: 0.3074 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5550 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 112/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2895 - wine_quality_loss: 0.2699 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5194 - wine_type_accuracy: 0.9962 - val_loss: 0.3326 - val_wine_quality_loss: 0.3024 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5503 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 113/180\n",
      "3155/3155 [==============================] - 0s 84us/sample - loss: 0.2888 - wine_quality_loss: 0.2693 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.5189 - wine_type_accuracy: 0.9962 - val_loss: 0.3377 - val_wine_quality_loss: 0.3074 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5549 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 114/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2883 - wine_quality_loss: 0.2685 - wine_type_loss: 0.0194 - wine_quality_root_mean_squared_error: 0.5185 - wine_type_accuracy: 0.9962 - val_loss: 0.3338 - val_wine_quality_loss: 0.3032 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5513 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 115/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2869 - wine_quality_loss: 0.2680 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.5172 - wine_type_accuracy: 0.9962 - val_loss: 0.3366 - val_wine_quality_loss: 0.3061 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5537 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 116/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2872 - wine_quality_loss: 0.2676 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.5176 - wine_type_accuracy: 0.9962 - val_loss: 0.3446 - val_wine_quality_loss: 0.3139 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5609 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 117/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2861 - wine_quality_loss: 0.2666 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.5166 - wine_type_accuracy: 0.9962 - val_loss: 0.3317 - val_wine_quality_loss: 0.3013 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5494 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 118/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2856 - wine_quality_loss: 0.2667 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5162 - wine_type_accuracy: 0.9962 - val_loss: 0.3318 - val_wine_quality_loss: 0.3014 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5494 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 119/180\n",
      "3155/3155 [==============================] - 0s 84us/sample - loss: 0.2861 - wine_quality_loss: 0.2675 - wine_type_loss: 0.0190 - wine_quality_root_mean_squared_error: 0.5167 - wine_type_accuracy: 0.9962 - val_loss: 0.3344 - val_wine_quality_loss: 0.3039 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5518 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 120/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2847 - wine_quality_loss: 0.2652 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.5155 - wine_type_accuracy: 0.9962 - val_loss: 0.3464 - val_wine_quality_loss: 0.3156 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5625 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 121/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2845 - wine_quality_loss: 0.2655 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5154 - wine_type_accuracy: 0.9962 - val_loss: 0.3342 - val_wine_quality_loss: 0.3036 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 122/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2828 - wine_quality_loss: 0.2643 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5138 - wine_type_accuracy: 0.9962 - val_loss: 0.3449 - val_wine_quality_loss: 0.3144 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5612 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 123/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2834 - wine_quality_loss: 0.2654 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.5145 - wine_type_accuracy: 0.9962 - val_loss: 0.3366 - val_wine_quality_loss: 0.3063 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5538 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 124/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2822 - wine_quality_loss: 0.2637 - wine_type_loss: 0.0206 - wine_quality_root_mean_squared_error: 0.5134 - wine_type_accuracy: 0.9962 - val_loss: 0.3391 - val_wine_quality_loss: 0.3086 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5561 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 125/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2831 - wine_quality_loss: 0.2643 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5144 - wine_type_accuracy: 0.9962 - val_loss: 0.3358 - val_wine_quality_loss: 0.3052 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5530 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 126/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2827 - wine_quality_loss: 0.2645 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5141 - wine_type_accuracy: 0.9962 - val_loss: 0.3356 - val_wine_quality_loss: 0.3051 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5529 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 127/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2815 - wine_quality_loss: 0.2629 - wine_type_loss: 0.0183 - wine_quality_root_mean_squared_error: 0.5130 - wine_type_accuracy: 0.9962 - val_loss: 0.3369 - val_wine_quality_loss: 0.3065 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 128/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2804 - wine_quality_loss: 0.2619 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5120 - wine_type_accuracy: 0.9962 - val_loss: 0.3327 - val_wine_quality_loss: 0.3024 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5503 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 129/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2804 - wine_quality_loss: 0.2625 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.5121 - wine_type_accuracy: 0.9962 - val_loss: 0.3410 - val_wine_quality_loss: 0.3108 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5578 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 130/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2795 - wine_quality_loss: 0.2611 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5113 - wine_type_accuracy: 0.9962 - val_loss: 0.3361 - val_wine_quality_loss: 0.3056 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5533 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 131/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2793 - wine_quality_loss: 0.2605 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5111 - wine_type_accuracy: 0.9962 - val_loss: 0.3400 - val_wine_quality_loss: 0.3094 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5568 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 132/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2790 - wine_quality_loss: 0.2609 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5109 - wine_type_accuracy: 0.9962 - val_loss: 0.3423 - val_wine_quality_loss: 0.3120 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5590 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 133/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2784 - wine_quality_loss: 0.2603 - wine_type_loss: 0.0179 - wine_quality_root_mean_squared_error: 0.5103 - wine_type_accuracy: 0.9962 - val_loss: 0.3327 - val_wine_quality_loss: 0.3024 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5503 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 134/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2781 - wine_quality_loss: 0.2600 - wine_type_loss: 0.0178 - wine_quality_root_mean_squared_error: 0.5102 - wine_type_accuracy: 0.9962 - val_loss: 0.3309 - val_wine_quality_loss: 0.3005 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5486 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 135/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2781 - wine_quality_loss: 0.2600 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5102 - wine_type_accuracy: 0.9962 - val_loss: 0.3320 - val_wine_quality_loss: 0.3016 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5495 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 136/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2781 - wine_quality_loss: 0.2602 - wine_type_loss: 0.0196 - wine_quality_root_mean_squared_error: 0.5103 - wine_type_accuracy: 0.9962 - val_loss: 0.3355 - val_wine_quality_loss: 0.3050 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5528 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 137/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2763 - wine_quality_loss: 0.2589 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.5086 - wine_type_accuracy: 0.9962 - val_loss: 0.3372 - val_wine_quality_loss: 0.3071 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5544 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 138/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2764 - wine_quality_loss: 0.2589 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5088 - wine_type_accuracy: 0.9962 - val_loss: 0.3359 - val_wine_quality_loss: 0.3055 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5532 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 139/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2766 - wine_quality_loss: 0.2589 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.5090 - wine_type_accuracy: 0.9962 - val_loss: 0.3382 - val_wine_quality_loss: 0.3080 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5553 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 140/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2762 - wine_quality_loss: 0.2585 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5088 - wine_type_accuracy: 0.9962 - val_loss: 0.3378 - val_wine_quality_loss: 0.3073 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5549 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 141/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2756 - wine_quality_loss: 0.2585 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5082 - wine_type_accuracy: 0.9962 - val_loss: 0.3395 - val_wine_quality_loss: 0.3090 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5565 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 142/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2750 - wine_quality_loss: 0.2574 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.5076 - wine_type_accuracy: 0.9962 - val_loss: 0.3424 - val_wine_quality_loss: 0.3120 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5590 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 143/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2750 - wine_quality_loss: 0.2575 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.5078 - wine_type_accuracy: 0.9962 - val_loss: 0.3354 - val_wine_quality_loss: 0.3052 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5528 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 144/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2737 - wine_quality_loss: 0.2577 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.5066 - wine_type_accuracy: 0.9962 - val_loss: 0.3476 - val_wine_quality_loss: 0.3172 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5636 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 145/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 0.2739 - wine_quality_loss: 0.2565 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5068 - wine_type_accuracy: 0.9962 - val_loss: 0.3345 - val_wine_quality_loss: 0.3042 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5519 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 146/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2732 - wine_quality_loss: 0.2560 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5061 - wine_type_accuracy: 0.9962 - val_loss: 0.3428 - val_wine_quality_loss: 0.3124 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5595 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 147/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 0.2718 - wine_quality_loss: 0.2548 - wine_type_loss: 0.0169 - wine_quality_root_mean_squared_error: 0.5048 - wine_type_accuracy: 0.9962 - val_loss: 0.3455 - val_wine_quality_loss: 0.3154 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5618 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 148/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2729 - wine_quality_loss: 0.2565 - wine_type_loss: 0.0168 - wine_quality_root_mean_squared_error: 0.5060 - wine_type_accuracy: 0.9962 - val_loss: 0.3374 - val_wine_quality_loss: 0.3070 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 149/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 0.2714 - wine_quality_loss: 0.2545 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5046 - wine_type_accuracy: 0.9962 - val_loss: 0.3370 - val_wine_quality_loss: 0.3065 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 150/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2709 - wine_quality_loss: 0.2542 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5041 - wine_type_accuracy: 0.9962 - val_loss: 0.3378 - val_wine_quality_loss: 0.3073 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5548 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 151/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 0.2708 - wine_quality_loss: 0.2545 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.5041 - wine_type_accuracy: 0.9962 - val_loss: 0.3450 - val_wine_quality_loss: 0.3144 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5613 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 152/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2705 - wine_quality_loss: 0.2542 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.5040 - wine_type_accuracy: 0.9962 - val_loss: 0.3342 - val_wine_quality_loss: 0.3039 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 153/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2691 - wine_quality_loss: 0.2525 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.5026 - wine_type_accuracy: 0.9962 - val_loss: 0.3345 - val_wine_quality_loss: 0.3042 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5519 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 154/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2695 - wine_quality_loss: 0.2530 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.5031 - wine_type_accuracy: 0.9962 - val_loss: 0.3418 - val_wine_quality_loss: 0.3112 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5585 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 155/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2702 - wine_quality_loss: 0.2535 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.5038 - wine_type_accuracy: 0.9962 - val_loss: 0.3365 - val_wine_quality_loss: 0.3060 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5535 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 156/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2694 - wine_quality_loss: 0.2532 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.5031 - wine_type_accuracy: 0.9962 - val_loss: 0.3402 - val_wine_quality_loss: 0.3095 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5568 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 157/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2683 - wine_quality_loss: 0.2517 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.5020 - wine_type_accuracy: 0.9962 - val_loss: 0.3408 - val_wine_quality_loss: 0.3101 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5575 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 158/180\n",
      "3155/3155 [==============================] - 0s 87us/sample - loss: 0.2684 - wine_quality_loss: 0.2523 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.5022 - wine_type_accuracy: 0.9965 - val_loss: 0.3388 - val_wine_quality_loss: 0.3083 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5557 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 159/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2681 - wine_quality_loss: 0.2517 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.5020 - wine_type_accuracy: 0.9962 - val_loss: 0.3488 - val_wine_quality_loss: 0.3183 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5647 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 160/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2675 - wine_quality_loss: 0.2519 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.5015 - wine_type_accuracy: 0.9962 - val_loss: 0.3388 - val_wine_quality_loss: 0.3083 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5557 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 161/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2669 - wine_quality_loss: 0.2508 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.5010 - wine_type_accuracy: 0.9962 - val_loss: 0.3402 - val_wine_quality_loss: 0.3099 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5569 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 162/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2661 - wine_quality_loss: 0.2502 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.5001 - wine_type_accuracy: 0.9965 - val_loss: 0.3361 - val_wine_quality_loss: 0.3059 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5533 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 163/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2656 - wine_quality_loss: 0.2505 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.4998 - wine_type_accuracy: 0.9962 - val_loss: 0.3352 - val_wine_quality_loss: 0.3046 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5524 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 164/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2660 - wine_quality_loss: 0.2503 - wine_type_loss: 0.0158 - wine_quality_root_mean_squared_error: 0.5001 - wine_type_accuracy: 0.9962 - val_loss: 0.3376 - val_wine_quality_loss: 0.3071 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 165/180\n",
      "3155/3155 [==============================] - 0s 73us/sample - loss: 0.2651 - wine_quality_loss: 0.2496 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.4994 - wine_type_accuracy: 0.9962 - val_loss: 0.3443 - val_wine_quality_loss: 0.3135 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5605 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 166/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2647 - wine_quality_loss: 0.2488 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.4990 - wine_type_accuracy: 0.9962 - val_loss: 0.3402 - val_wine_quality_loss: 0.3096 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5569 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 167/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2645 - wine_quality_loss: 0.2492 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.4989 - wine_type_accuracy: 0.9962 - val_loss: 0.3356 - val_wine_quality_loss: 0.3053 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5529 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 168/180\n",
      "3155/3155 [==============================] - 0s 88us/sample - loss: 0.2648 - wine_quality_loss: 0.2485 - wine_type_loss: 0.0154 - wine_quality_root_mean_squared_error: 0.4993 - wine_type_accuracy: 0.9965 - val_loss: 0.3350 - val_wine_quality_loss: 0.3044 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5522 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 169/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2633 - wine_quality_loss: 0.2478 - wine_type_loss: 0.0154 - wine_quality_root_mean_squared_error: 0.4978 - wine_type_accuracy: 0.9962 - val_loss: 0.3420 - val_wine_quality_loss: 0.3115 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5585 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 170/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2631 - wine_quality_loss: 0.2473 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.4977 - wine_type_accuracy: 0.9965 - val_loss: 0.3395 - val_wine_quality_loss: 0.3089 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5564 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 171/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2635 - wine_quality_loss: 0.2483 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.4981 - wine_type_accuracy: 0.9965 - val_loss: 0.3405 - val_wine_quality_loss: 0.3100 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5572 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 172/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2631 - wine_quality_loss: 0.2477 - wine_type_loss: 0.0152 - wine_quality_root_mean_squared_error: 0.4978 - wine_type_accuracy: 0.9968 - val_loss: 0.3439 - val_wine_quality_loss: 0.3134 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5603 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 173/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2624 - wine_quality_loss: 0.2467 - wine_type_loss: 0.0152 - wine_quality_root_mean_squared_error: 0.4971 - wine_type_accuracy: 0.9968 - val_loss: 0.3393 - val_wine_quality_loss: 0.3089 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5562 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 174/180\n",
      "3155/3155 [==============================] - 0s 71us/sample - loss: 0.2621 - wine_quality_loss: 0.2468 - wine_type_loss: 0.0151 - wine_quality_root_mean_squared_error: 0.4969 - wine_type_accuracy: 0.9968 - val_loss: 0.3458 - val_wine_quality_loss: 0.3154 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5620 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 175/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2612 - wine_quality_loss: 0.2457 - wine_type_loss: 0.0151 - wine_quality_root_mean_squared_error: 0.4961 - wine_type_accuracy: 0.9965 - val_loss: 0.3395 - val_wine_quality_loss: 0.3093 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5564 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 176/180\n",
      "3155/3155 [==============================] - 0s 70us/sample - loss: 0.2610 - wine_quality_loss: 0.2459 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.4960 - wine_type_accuracy: 0.9968 - val_loss: 0.3392 - val_wine_quality_loss: 0.3086 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5560 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 177/180\n",
      "3155/3155 [==============================] - 0s 86us/sample - loss: 0.2601 - wine_quality_loss: 0.2457 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.4951 - wine_type_accuracy: 0.9965 - val_loss: 0.3349 - val_wine_quality_loss: 0.3043 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5521 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 178/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2590 - wine_quality_loss: 0.2440 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.4941 - wine_type_accuracy: 0.9965 - val_loss: 0.3372 - val_wine_quality_loss: 0.3067 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5543 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 179/180\n",
      "3155/3155 [==============================] - 0s 85us/sample - loss: 0.2601 - wine_quality_loss: 0.2454 - wine_type_loss: 0.0148 - wine_quality_root_mean_squared_error: 0.4952 - wine_type_accuracy: 0.9965 - val_loss: 0.3430 - val_wine_quality_loss: 0.3124 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5595 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 180/180\n",
      "3155/3155 [==============================] - 0s 72us/sample - loss: 0.2586 - wine_quality_loss: 0.2438 - wine_type_loss: 0.0147 - wine_quality_root_mean_squared_error: 0.4939 - wine_type_accuracy: 0.9968 - val_loss: 0.3447 - val_wine_quality_loss: 0.3140 - val_wine_type_loss: 0.0298 - val_wine_quality_root_mean_squared_error: 0.5608 - val_wine_type_accuracy: 0.9937\n"
     ]
    }
   ],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "history = model.fit(norm_train_X, train_Y,\n",
    "                    epochs = 180, validation_data=(norm_val_X, val_Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fadad8896eda9c8c2115970724b15508",
     "grade": true,
     "grade_id": "cell-eb4d5b41bef8f0ab",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CubF2J2gSf6q"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "789/789 [==============================] - 0s 21us/sample - loss: 0.3447 - wine_quality_loss: 0.3140 - wine_type_loss: 0.0298 - wine_quality_root_mean_squared_error: 0.5608 - wine_type_accuracy: 0.9937\n",
      "\n",
      "loss: 0.3446847898802981\n",
      "wine_quality_loss: 0.3139527440071106\n",
      "wine_type_loss: 0.029791831970214844\n",
      "wine_quality_rmse: 0.5608131885528564\n",
      "wine_type_accuracy: 0.9936628937721252\n"
     ]
    }
   ],
   "source": [
    "# Gather the training metrics\n",
    "loss, wine_quality_loss, wine_type_loss, wine_quality_rmse, wine_type_accuracy = model.evaluate(x=norm_val_X, y=val_Y)\n",
    "\n",
    "print()\n",
    "print(f'loss: {loss}')\n",
    "print(f'wine_quality_loss: {wine_quality_loss}')\n",
    "print(f'wine_type_loss: {wine_type_loss}')\n",
    "print(f'wine_quality_rmse: {wine_quality_rmse}')\n",
    "print(f'wine_type_accuracy: {wine_type_accuracy}')\n",
    "\n",
    "# EXPECTED VALUES\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.018 - 0.030\n",
    "# ~ 0.50 - 0.62\n",
    "# ~ 0.97 - 1.0\n",
    "\n",
    "# Example:\n",
    "#0.3657050132751465\n",
    "#0.3463745415210724\n",
    "#0.019330406561493874\n",
    "#0.5885359048843384\n",
    "#0.9974651336669922"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gPtTGAP4usnm"
   },
   "source": [
    "## Analyze the Model Performance\n",
    "\n",
    "Note that the model has two outputs. The output at index 0 is quality and index 1 is wine type\n",
    "\n",
    "So, round the quality predictions to the nearest integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tBq9PEeAaW-Y"
   },
   "outputs": [],
   "source": [
    "predictions = model.predict(norm_test_X)\n",
    "quality_pred = predictions[0]\n",
    "type_pred = predictions[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YLhgTR4xTIxj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5.4742303]\n"
     ]
    }
   ],
   "source": [
    "print(quality_pred[0])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 5.6 - 6.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MPi-eYfGTUXi"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6.0637816e-05]\n",
      "[0.9999604]\n"
     ]
    }
   ],
   "source": [
    "print(type_pred[0])\n",
    "print(type_pred[944])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# A number close to zero\n",
    "# A number close to or equal to 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Kohk-9C6vt_s"
   },
   "source": [
    "### Plot Utilities\n",
    "\n",
    "We define a few utilities to visualize the model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "62gEOFUhn6aQ"
   },
   "outputs": [],
   "source": [
    "def plot_metrics(metric_name, title, ylim=5):\n",
    "    plt.title(title)\n",
    "    plt.ylim(0,ylim)\n",
    "    plt.plot(history.history[metric_name],color='blue',label=metric_name)\n",
    "    plt.plot(history.history['val_' + metric_name],color='green',label='val_' + metric_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6rfgSx7uz5dj"
   },
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(y_true, y_pred, title='', labels=[0,1]):\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(111)\n",
    "    cax = ax.matshow(cm)\n",
    "    plt.title('Confusion matrix of the classifier')\n",
    "    fig.colorbar(cax)\n",
    "    ax.set_xticklabels([''] + labels)\n",
    "    ax.set_yticklabels([''] + labels)\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('True')\n",
    "    fmt = 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "          plt.text(j, i, format(cm[i, j], fmt),\n",
    "                  horizontalalignment=\"center\",\n",
    "                  color=\"black\" if cm[i, j] > thresh else \"white\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dfVLIqi017Vf"
   },
   "outputs": [],
   "source": [
    "def plot_diff(y_true, y_pred, title = '' ):\n",
    "    plt.scatter(y_true, y_pred)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('True Values')\n",
    "    plt.ylabel('Predictions')\n",
    "    plt.axis('equal')\n",
    "    plt.axis('square')\n",
    "    plt.plot([-100, 100], [-100, 100])\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8sd1jdFbwE0I"
   },
   "source": [
    "### Plots for Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "f3MwZ5J1pOfj"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_quality_root_mean_squared_error', 'RMSE', ylim=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QIAxEezCppnd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_type_loss', 'Wine Type Loss', ylim=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uYV9AOAMwI9p"
   },
   "source": [
    "### Plots for Confusion Matrix\n",
    "\n",
    "Plot the confusion matrices for wine type. You can see that the model performs well for prediction of wine type from the confusion matrix and the loss metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "C3hvTYxIaf3n"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(test_Y[1], np.round(type_pred), title='Wine Type', labels = [0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GW91ym8P2I5y"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter_plot = plot_diff(test_Y[0], quality_pred, title='Type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "name": "exercise-answer.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
